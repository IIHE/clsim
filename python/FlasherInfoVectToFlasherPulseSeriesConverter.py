from .. import icetray, dataclasses
from . import I3CLSimFlasherPulse, I3CLSimFlasherPulseSeries

from I3Tray import I3Units
import math

class FlasherInfoVectToFlasherPulseSeriesConverter(icetray.I3ConditionalModule):
    """
    Read I3FlasherInfo objects from the frame, apply knowledge taken from
    various places (wiki, C.Wendt, ppc, photonics, ...) and create
    I3CLSimFLasherPulse objects desribing the light output of individual
    LEDs.
    """
    def __init__(self, context):
        icetray.I3ConditionalModule.__init__(self, context)
        self.AddParameter("FlasherInfoVectName",
                          "Name of the I3FlasherInfoVect object to read",
                          "I3FlasherInfo")
        self.AddParameter("FlasherPulseSeriesName",
                          "Name of the I3CLSimFlasherPulseSeries to write",
                          "I3CLSimFlasherPulseSeries")
        self.AddParameter("NumberOfPhotonsAtMaxBrightness",
                          "Number of photons generated by a flasher LED at maximum brightness",
                          8.0e9)
        self.AddOutBox("OutBox")
        self.currentGeometry = None
        
    def Configure(self):
        self.flasherInfoVectName = self.GetParameter("FlasherInfoVectName")
        self.flasherPulseSeriesName = self.GetParameter("FlasherPulseSeriesName")
        self.numberOfPhotonsAtMaxBrightness = self.GetParameter("NumberOfPhotonsAtMaxBrightness")

    def Geometry(self, frame):
        self.currentGeometry = frame["I3Geometry"]
        self.PushFrame(frame)
    
    def GetNumPhotons(self, brightness, width):
        # taken from Chris Wendt's wiki page http://wiki.icecube.wisc.edu/index.php/LED_light_output
        # (this is for a single LED)
        return self.numberOfPhotonsAtMaxBrightness*(0.0006753 + 0.00005593 * float(brightness)) * (float(width) + 13.9 - (57.5/(1. + float(brightness) / 34.4)))
    
    def DAQ(self, frame):
        if self.currentGeometry is None:
            raise RuntimeError("found a DAQ frame without any previous Geometry frame")
        
        outputSeries = I3CLSimFlasherPulseSeries()
        if self.flasherInfoVectName not in frame:
            # put an empty pulseSeries in the frame
            frame[self.flasherPulseSeriesName] = outputSeries
            self.PushFrame(frame)
            return
        
        flasherInfoVect = frame[self.flasherInfoVectName] 
        for flasherInfo in flasherInfoVect:
            omGeo = self.currentGeometry.omgeo[flasherInfo.flashing_om]
            domPos = omGeo.position
            
            numPhotons = self.GetNumPhotons(flasherInfo.led_brightness, flasherInfo.width)
            
            # loop over all twelve flashers
            for i in range(12):
                # skip LED if inactive
                if flasherInfo.mask & (1 << i) == 0: continue
                
                tiltedFlasher = i >= 6
                flasherPosIndex = i % 6
                flasherAziRotation = 60.*I3Units.deg * float(flasherPosIndex)
                flasherUpwardsTiltAngle = 0.
                if tiltedFlasher: flasherUpwardsTiltAngle=42.*I3Units.deg
                
                # assume flasher
                flasherDir = dataclasses.I3Direction()
                flasherDir.set_theta_phi(90.*I3Units.deg - flasherUpwardsTiltAngle, flasherAziRotation)
                
                # TODO/FIXME:
                #  * rotate flasher LED according to DOM rotation (+=omgeo.aziangle)

                flasherRadiusInDOM = 11.9*I3Units.cm
                flasherZPosInDOM = 8.0*I3Units.cm
                flasherPos = dataclasses.I3Direction()
                # flasher position on flasher board
                flasherPos.set_theta_phi(90.*I3Units.deg, flasherAziRotation) # no upwards tilt for position
                # flasher position in global coordinates
                flasherPos = dataclasses.I3Position(domPos.x + flasherPos.x*flasherRadiusInDOM, domPos.y + flasherPos.y*flasherRadiusInDOM, domPos.z + flasherZPosInDOM)

                newPulse = I3CLSimFlasherPulse()

                # TODO/FIXME: implement cDOM flasher LEDs
                newPulse.type = I3CLSimFlasherPulse.FlasherPulseType.LED405nm
                newPulse.pos = flasherPos
                newPulse.dir = flasherDir
                newPulse.time = flasherInfo.flash_time
                # FWHM according to http://wiki.icecube.wisc.edu/index.php/LED_output_time_profile :
                newPulse.pulseWidth = (float(flasherInfo.width)/2.) * I3Units.ns
                newPulse.numberOfPhotonsNoBias = numPhotons
                
                outputSeries.append(newPulse)

        frame[self.flasherPulseSeriesName] = outputSeries
        self.PushFrame(frame)
    